---
apiVersion: "v1"
kind: "Template"
metadata:
  annotations:
    fabric8.rfrefrefdrf/summary: "Camel route using Servlet deployed as WAR"
    description: "# War Camel Servlet QuickStart\r\n\r\nThis example demonstrates\
      \ how you can use Servlet to expose a http\r\nservice in a Camel route, and\
      \ run that in a servlet container such as\r\nApache Tomcat. \r\n\r\n\r\n###\
      \ Building\r\n\r\nThe example can be built with\r\n\r\n    mvn clean install\r\
      \n\r\n\r\n### Running the example locally\r\n\r\nThe example can be run locally\
      \ using the following Maven goal:\r\n\r\n    mvn clean install jetty:run\r\n\
      \r\nThen you can access the service from a web browser using the following url:\r\
      \n\r\n    http://localhost:8080/\r\n\r\n\r\n### Running the example in fabric8\r\
      \n\r\nIt is assumed a running Kubernetes platform is already running. If not\
      \ you can find details how to [get started](http://fabric8.io/guide/getStarted/index.html).\r\
      \n\r\nThe example can be built and deployed using a single goal:\r\n\r\n   \
      \ mvn -Pf8-local-deploy\r\n\r\nWhen the example runs in fabric8, you can use\
      \ the OpenShift client tool to inspect the status\r\n\r\nTo list all the running\
      \ pods:\r\n\r\n    oc get pods\r\n\r\nThen find the name of the pod that runs\
      \ this quickstart, and output the logs from the running pods with:\r\n\r\n \
      \   oc logs <name of pod>\r\n\r\nYou can also use the fabric8 [web console](http://fabric8.io/guide/console.html)\
      \ to manage the\r\nrunning pods, and view logs and much more.\r\n\r\n\r\n###\
      \ Access services using a web browser\r\n\r\nWhen the application is running,\
      \ you can use a web browser to access the HTTP service. Assuming that you\r\n\
      have a [Vagrant setup](http://fabric8.io/guide/getStarted/vagrant.html) you\
      \ can access the REST service with\r\n`http://war-camel-servlet-default.vagrant.f8/`.\r\
      \n\r\nNotice: As it depends on your OpenShift setup, the hostname (route) might\
      \ vary. Verify with `oc get routes` which\r\nhostname is valid for you.\r\n\r\
      \n\r\n### More details\r\n\r\nYou can find more details about running this [quickstart](http://fabric8.io/guide/quickstarts/running.html)\
      \ on the website. This also includes instructions how to change the Docker image\
      \ user and registry.\r\n\r\n"
    fabric8.rfrefrefdrf/iconUrl: "img/icons/camel.svg"
  labels: {}
  name: "rfrefrefdrf"
objects:
- apiVersion: "v1"
  kind: "Service"
  metadata:
    annotations:
      servicepath: "/hello"
      fabric8.io/iconUrl: "img/icons/camel.svg"
    labels:
      provider: "fabric8"
      project: "rfrefrefdrf"
      version: "1.0-SNAPSHOT"
      group: "quickstarts"
    name: "rfrefrefdrf"
  spec:
    deprecatedPublicIPs: []
    externalIPs: []
    ports:
    - port: 80
      protocol: "TCP"
      targetPort: 8080
    selector:
      project: "rfrefrefdrf"
      provider: "fabric8"
      group: "quickstarts"
    type: "LoadBalancer"
- apiVersion: "v1"
  kind: "ReplicationController"
  metadata:
    annotations:
      fabric8.io/iconUrl: "img/icons/camel.svg"
    labels:
      provider: "fabric8"
      project: "rfrefrefdrf"
      version: "1.0-SNAPSHOT"
      group: "quickstarts"
    name: "rfrefrefdrf"
  spec:
    replicas: 1
    selector:
      provider: "fabric8"
      project: "rfrefrefdrf"
      version: "1.0-SNAPSHOT"
      group: "quickstarts"
    template:
      metadata:
        annotations: {}
        labels:
          provider: "fabric8"
          project: "rfrefrefdrf"
          version: "1.0-SNAPSHOT"
          group: "quickstarts"
      spec:
        containers:
        - args: []
          command: []
          env:
          - name: "KUBERNETES_NAMESPACE"
            valueFrom:
              fieldRef:
                fieldPath: "metadata.namespace"
          image: "fabric8/rfrefrefdrf:1.0-SNAPSHOT"
          name: "rfrefrefdrf"
          ports:
          - containerPort: 8080
            name: "http"
          - containerPort: 8778
            name: "jolokia"
          readinessProbe:
            httpGet:
              httpHeaders: []
              path: "/"
              port: 8080
            initialDelaySeconds: 5
            timeoutSeconds: 30
          resources:
            limits:
              cpu: "0"
              memory: "0"
            requests:
              cpu: "0"
              memory: "0"
          securityContext: {}
          volumeMounts: []
        imagePullSecrets: []
        nodeSelector: {}
        volumes: []
parameters: []
